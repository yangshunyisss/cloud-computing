1. Orchestration tools, such as Kubernetes，play a key role in the server infrastructure for the modern applications.
(a) Explain how these tools help manage and scale application servers.
Automate container placement across cluster nodes.
Monitor application health, restart failed containers.
Scale replicas up/down based on workload.
Distribute traffic and maintain high availability.

(b) Describe how orchestration tools facilitate automated deployment, scaling, and management of application servers.
Integrate with CI/CD pipelines for automated rolling updates and rollbacks.
Support horizontal scaling triggered by metrics (e.g., CPU usage).
Self-healing by rescheduling Pods when nodes fail.
Use declarative configuration (YAML/Helm) for consistent deployment.

2. Explain the difference between a Pod, Deployment, and Service.
Pod: The smallest unit in Kubernetes, encapsulates one or more containers sharing network and storage.
Deployment: A higher-level controller that manages Pods, ensures the desired number of replicas, rolling updates, and rollback.
Service: Provides a stable networking endpoint to access Pods, supporting different types such as ClusterIP, NodePort, and LoadBalancer.

3. What is a Namespace in Kubernetes? Please list one example.
A Namespace is a logical partition within a Kubernetes cluster, used to isolate and organize resources (e.g., separating dev, test, prod).
Example:
kubectl create namespace dev

4. Explain the role of the Kubelet. How do you check the nodes in a Kubernetes cluster?
Kubelet: An agent running on each node that ensures the containers described in PodSpecs are running and healthy. It interacts with the container runtime and reports node status to the control plane.
Command to check nodes:
kubectl get nodes

5. What is the difference between ClusterIP, NodePort, and LoadBalancer services?
ClusterIP: Default type, accessible only inside the cluster.
NodePort: Exposes the service on a specific port of each node’s IP, allowing limited external access.
LoadBalancer: Creates an external load balancer (e.g., AWS ELB) and routes traffic into the cluster.

6. How do you scale a Deployment to 5 replicas using kubectl?
kubectl scale deployment <deployment-name> --replicas=5

7. How would you update the image of a Deployment without downtime?
kubectl set image deployment/<deployment-name> <container-name>=<new-image>:<tag>
Kubernetes performs a rolling update to ensure zero downtime.

8. How do you expose a Deployment to external traffic?
kubectl expose deployment <deployment-name> --type=LoadBalancer --port=80

9. How does Kubernetes scheduling decide which node a Pod runs on?
Based on resource availability (CPU, memory).
Considers constraints like affinity, taints, and tolerations.
Uses Pod priority and scheduling policies.
Attempts to balance load across nodes.

10. What is the role of Ingress and how does it differ from a Service?
Ingress: Provides HTTP/HTTPS routing from outside the cluster into Services. Supports advanced features like host-based routing, path-based routing, and SSL termination.
Service: Provides stable networking and load balancing to Pods, but only at the IP/port level.
Difference: Ingress works at the application layer (HTTP/HTTPS), while Service works at the network layer. Ingress can manage multiple Services behind a single external endpoint.